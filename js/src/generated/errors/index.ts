/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * DeveloperNotAthorized: 'Developer not authorized'
 *
 * @category Errors
 * @category generated
 */
export class DeveloperNotAthorizedError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = 'DeveloperNotAthorized';
  constructor() {
    super('Developer not authorized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeveloperNotAthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new DeveloperNotAthorizedError());
createErrorFromNameLookup.set('DeveloperNotAthorized', () => new DeveloperNotAthorizedError());

/**
 * DeveloperActionNotAthorized: 'Developer action not authorized'
 *
 * @category Errors
 * @category generated
 */
export class DeveloperActionNotAthorizedError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = 'DeveloperActionNotAthorized';
  constructor() {
    super('Developer action not authorized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeveloperActionNotAthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new DeveloperActionNotAthorizedError());
createErrorFromNameLookup.set(
  'DeveloperActionNotAthorized',
  () => new DeveloperActionNotAthorizedError(),
);

/**
 * ProcessorTypeMismatch: 'Procesor type mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorTypeMismatchError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = 'ProcessorTypeMismatch';
  constructor() {
    super('Procesor type mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorTypeMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new ProcessorTypeMismatchError());
createErrorFromNameLookup.set('ProcessorTypeMismatch', () => new ProcessorTypeMismatchError());

/**
 * ProcessorNameLengthIncorrect: 'Procesor name length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNameLengthIncorrectError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = 'ProcessorNameLengthIncorrect';
  constructor() {
    super('Procesor name length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNameLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new ProcessorNameLengthIncorrectError());
createErrorFromNameLookup.set(
  'ProcessorNameLengthIncorrect',
  () => new ProcessorNameLengthIncorrectError(),
);

/**
 * ProcessorNameInvalid: 'Processor name must contain only ASCII letters in lower case and numbers'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNameInvalidError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = 'ProcessorNameInvalid';
  constructor() {
    super('Processor name must contain only ASCII letters in lower case and numbers');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNameInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new ProcessorNameInvalidError());
createErrorFromNameLookup.set('ProcessorNameInvalid', () => new ProcessorNameInvalidError());

/**
 * ProcessorNotWhitelisted: 'Procesor trying to use is not whitelisted'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNotWhitelistedError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = 'ProcessorNotWhitelisted';
  constructor() {
    super('Procesor trying to use is not whitelisted');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNotWhitelistedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new ProcessorNotWhitelistedError());
createErrorFromNameLookup.set('ProcessorNotWhitelisted', () => new ProcessorNotWhitelistedError());

/**
 * AppNameLengthIncorrect: 'Application name (ID) length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class AppNameLengthIncorrectError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = 'AppNameLengthIncorrect';
  constructor() {
    super('Application name (ID) length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppNameLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new AppNameLengthIncorrectError());
createErrorFromNameLookup.set('AppNameLengthIncorrect', () => new AppNameLengthIncorrectError());

/**
 * AppNameInvalid: 'Application name must contain only ASCII letters in lower case and numbers'
 *
 * @category Errors
 * @category generated
 */
export class AppNameInvalidError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = 'AppNameInvalid';
  constructor() {
    super('Application name must contain only ASCII letters in lower case and numbers');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppNameInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new AppNameInvalidError());
createErrorFromNameLookup.set('AppNameInvalid', () => new AppNameInvalidError());

/**
 * AppManagementNotAthorized: 'App management action not authorized'
 *
 * @category Errors
 * @category generated
 */
export class AppManagementNotAthorizedError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = 'AppManagementNotAthorized';
  constructor() {
    super('App management action not authorized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppManagementNotAthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new AppManagementNotAthorizedError());
createErrorFromNameLookup.set(
  'AppManagementNotAthorized',
  () => new AppManagementNotAthorizedError(),
);

/**
 * MissingRequiredField: 'Missing field required by Application settings'
 *
 * @category Errors
 * @category generated
 */
export class MissingRequiredFieldError extends Error {
  readonly code: number = 0x1779;
  readonly name: string = 'MissingRequiredField';
  constructor() {
    super('Missing field required by Application settings');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingRequiredFieldError);
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MissingRequiredFieldError());
createErrorFromNameLookup.set('MissingRequiredField', () => new MissingRequiredFieldError());

/**
 * ActionProhibitedByAppSettings: 'The action is prohibited by application settings'
 *
 * @category Errors
 * @category generated
 */
export class ActionProhibitedByAppSettingsError extends Error {
  readonly code: number = 0x177a;
  readonly name: string = 'ActionProhibitedByAppSettings';
  constructor() {
    super('The action is prohibited by application settings');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ActionProhibitedByAppSettingsError);
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new ActionProhibitedByAppSettingsError());
createErrorFromNameLookup.set(
  'ActionProhibitedByAppSettings',
  () => new ActionProhibitedByAppSettingsError(),
);

/**
 * AliasLengthIncorrect: 'Alias length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class AliasLengthIncorrectError extends Error {
  readonly code: number = 0x177b;
  readonly name: string = 'AliasLengthIncorrect';
  constructor() {
    super('Alias length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new AliasLengthIncorrectError());
createErrorFromNameLookup.set('AliasLengthIncorrect', () => new AliasLengthIncorrectError());

/**
 * AliasInvalid: 'Alias must contain only ASCII letters in lower case, numbers and underscores'
 *
 * @category Errors
 * @category generated
 */
export class AliasInvalidError extends Error {
  readonly code: number = 0x177c;
  readonly name: string = 'AliasInvalid';
  constructor() {
    super('Alias must contain only ASCII letters in lower case, numbers and underscores');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new AliasInvalidError());
createErrorFromNameLookup.set('AliasInvalid', () => new AliasInvalidError());

/**
 * ProfileIncorrect: 'Profile incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileIncorrectError extends Error {
  readonly code: number = 0x177d;
  readonly name: string = 'ProfileIncorrect';
  constructor() {
    super('Profile incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new ProfileIncorrectError());
createErrorFromNameLookup.set('ProfileIncorrect', () => new ProfileIncorrectError());

/**
 * ProfileAliasIncorrect: 'Profile alias is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileAliasIncorrectError extends Error {
  readonly code: number = 0x177e;
  readonly name: string = 'ProfileAliasIncorrect';
  constructor() {
    super('Profile alias is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileAliasIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new ProfileAliasIncorrectError());
createErrorFromNameLookup.set('ProfileAliasIncorrect', () => new ProfileAliasIncorrectError());

/**
 * AliasAccountRequired: 'Alias account required to register action'
 *
 * @category Errors
 * @category generated
 */
export class AliasAccountRequiredError extends Error {
  readonly code: number = 0x177f;
  readonly name: string = 'AliasAccountRequired';
  constructor() {
    super('Alias account required to register action');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasAccountRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new AliasAccountRequiredError());
createErrorFromNameLookup.set('AliasAccountRequired', () => new AliasAccountRequiredError());

/**
 * AliasAccountsMustBeNone: 'Alias accounts must not be passed'
 *
 * @category Errors
 * @category generated
 */
export class AliasAccountsMustBeNoneError extends Error {
  readonly code: number = 0x1780;
  readonly name: string = 'AliasAccountsMustBeNone';
  constructor() {
    super('Alias accounts must not be passed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasAccountsMustBeNoneError);
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new AliasAccountsMustBeNoneError());
createErrorFromNameLookup.set('AliasAccountsMustBeNone', () => new AliasAccountsMustBeNoneError());

/**
 * BothAliasAccountRequired: 'Both alias account required to update'
 *
 * @category Errors
 * @category generated
 */
export class BothAliasAccountRequiredError extends Error {
  readonly code: number = 0x1781;
  readonly name: string = 'BothAliasAccountRequired';
  constructor() {
    super('Both alias account required to update');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BothAliasAccountRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new BothAliasAccountRequiredError());
createErrorFromNameLookup.set(
  'BothAliasAccountRequired',
  () => new BothAliasAccountRequiredError(),
);

/**
 * CurrentAliasAccountRequired: 'Current alias account required to delete'
 *
 * @category Errors
 * @category generated
 */
export class CurrentAliasAccountRequiredError extends Error {
  readonly code: number = 0x1782;
  readonly name: string = 'CurrentAliasAccountRequired';
  constructor() {
    super('Current alias account required to delete');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CurrentAliasAccountRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new CurrentAliasAccountRequiredError());
createErrorFromNameLookup.set(
  'CurrentAliasAccountRequired',
  () => new CurrentAliasAccountRequiredError(),
);

/**
 * UpdateNotAuthorized: 'Profile update not authorized'
 *
 * @category Errors
 * @category generated
 */
export class UpdateNotAuthorizedError extends Error {
  readonly code: number = 0x1783;
  readonly name: string = 'UpdateNotAuthorized';
  constructor() {
    super('Profile update not authorized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UpdateNotAuthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new UpdateNotAuthorizedError());
createErrorFromNameLookup.set('UpdateNotAuthorized', () => new UpdateNotAuthorizedError());

/**
 * BirthDateIncorrect: 'Profile birth date is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class BirthDateIncorrectError extends Error {
  readonly code: number = 0x1784;
  readonly name: string = 'BirthDateIncorrect';
  constructor() {
    super('Profile birth date is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BirthDateIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new BirthDateIncorrectError());
createErrorFromNameLookup.set('BirthDateIncorrect', () => new BirthDateIncorrectError());

/**
 * ProfileFirstNameLengthIncorrect: 'Profile first name length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileFirstNameLengthIncorrectError extends Error {
  readonly code: number = 0x1785;
  readonly name: string = 'ProfileFirstNameLengthIncorrect';
  constructor() {
    super('Profile first name length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileFirstNameLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new ProfileFirstNameLengthIncorrectError());
createErrorFromNameLookup.set(
  'ProfileFirstNameLengthIncorrect',
  () => new ProfileFirstNameLengthIncorrectError(),
);

/**
 * ProfileLastNameLengthIncorrect: 'Profile last name length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileLastNameLengthIncorrectError extends Error {
  readonly code: number = 0x1786;
  readonly name: string = 'ProfileLastNameLengthIncorrect';
  constructor() {
    super('Profile last name length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileLastNameLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new ProfileLastNameLengthIncorrectError());
createErrorFromNameLookup.set(
  'ProfileLastNameLengthIncorrect',
  () => new ProfileLastNameLengthIncorrectError(),
);

/**
 * SubspaceAliasIncorrect: 'Subspace alias is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class SubspaceAliasIncorrectError extends Error {
  readonly code: number = 0x1787;
  readonly name: string = 'SubspaceAliasIncorrect';
  constructor() {
    super('Subspace alias is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspaceAliasIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new SubspaceAliasIncorrectError());
createErrorFromNameLookup.set('SubspaceAliasIncorrect', () => new SubspaceAliasIncorrectError());

/**
 * SubspaceNameIncorrect: 'Subspace name length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class SubspaceNameIncorrectError extends Error {
  readonly code: number = 0x1788;
  readonly name: string = 'SubspaceNameIncorrect';
  constructor() {
    super('Subspace name length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspaceNameIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new SubspaceNameIncorrectError());
createErrorFromNameLookup.set('SubspaceNameIncorrect', () => new SubspaceNameIncorrectError());

/**
 * SubspacePublishingPermissionViolation: 'Subspace publishing permission violated'
 *
 * @category Errors
 * @category generated
 */
export class SubspacePublishingPermissionViolationError extends Error {
  readonly code: number = 0x1789;
  readonly name: string = 'SubspacePublishingPermissionViolation';
  constructor() {
    super('Subspace publishing permission violated');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspacePublishingPermissionViolationError);
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new SubspacePublishingPermissionViolationError());
createErrorFromNameLookup.set(
  'SubspacePublishingPermissionViolation',
  () => new SubspacePublishingPermissionViolationError(),
);

/**
 * SubspacePublishingConnectionProofAccountRequired: 'Subspace publishing Connection-proof account required'
 *
 * @category Errors
 * @category generated
 */
export class SubspacePublishingConnectionProofAccountRequiredError extends Error {
  readonly code: number = 0x178a;
  readonly name: string = 'SubspacePublishingConnectionProofAccountRequired';
  constructor() {
    super('Subspace publishing Connection-proof account required');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspacePublishingConnectionProofAccountRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new SubspacePublishingConnectionProofAccountRequiredError(),
);
createErrorFromNameLookup.set(
  'SubspacePublishingConnectionProofAccountRequired',
  () => new SubspacePublishingConnectionProofAccountRequiredError(),
);

/**
 * SubspacePublishingManagerProofAccountRequired: 'Subspace publishing Manager-proof account required'
 *
 * @category Errors
 * @category generated
 */
export class SubspacePublishingManagerProofAccountRequiredError extends Error {
  readonly code: number = 0x178b;
  readonly name: string = 'SubspacePublishingManagerProofAccountRequired';
  constructor() {
    super('Subspace publishing Manager-proof account required');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspacePublishingManagerProofAccountRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x178b,
  () => new SubspacePublishingManagerProofAccountRequiredError(),
);
createErrorFromNameLookup.set(
  'SubspacePublishingManagerProofAccountRequired',
  () => new SubspacePublishingManagerProofAccountRequiredError(),
);

/**
 * UriLengthIncorrect: 'URI length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class UriLengthIncorrectError extends Error {
  readonly code: number = 0x178c;
  readonly name: string = 'UriLengthIncorrect';
  constructor() {
    super('URI length is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UriLengthIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new UriLengthIncorrectError());
createErrorFromNameLookup.set('UriLengthIncorrect', () => new UriLengthIncorrectError());

/**
 * TargetPublicationRequired: 'Missed Target Publication account'
 *
 * @category Errors
 * @category generated
 */
export class TargetPublicationRequiredError extends Error {
  readonly code: number = 0x178d;
  readonly name: string = 'TargetPublicationRequired';
  constructor() {
    super('Missed Target Publication account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TargetPublicationRequiredError);
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new TargetPublicationRequiredError());
createErrorFromNameLookup.set(
  'TargetPublicationRequired',
  () => new TargetPublicationRequiredError(),
);

/**
 * BothMirrorAndReplyNotAllowed: 'Both mirroring and replying not allowed in the same time'
 *
 * @category Errors
 * @category generated
 */
export class BothMirrorAndReplyNotAllowedError extends Error {
  readonly code: number = 0x178e;
  readonly name: string = 'BothMirrorAndReplyNotAllowed';
  constructor() {
    super('Both mirroring and replying not allowed in the same time');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BothMirrorAndReplyNotAllowedError);
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new BothMirrorAndReplyNotAllowedError());
createErrorFromNameLookup.set(
  'BothMirrorAndReplyNotAllowed',
  () => new BothMirrorAndReplyNotAllowedError(),
);

/**
 * SelfConnectionNotAllowed: 'Self conections is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class SelfConnectionNotAllowedError extends Error {
  readonly code: number = 0x178f;
  readonly name: string = 'SelfConnectionNotAllowed';
  constructor() {
    super('Self conections is not allowed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SelfConnectionNotAllowedError);
    }
  }
}

createErrorFromCodeLookup.set(0x178f, () => new SelfConnectionNotAllowedError());
createErrorFromNameLookup.set(
  'SelfConnectionNotAllowed',
  () => new SelfConnectionNotAllowedError(),
);

/**
 * ConnectionTargetAccountMissed: 'Connection target account is missed'
 *
 * @category Errors
 * @category generated
 */
export class ConnectionTargetAccountMissedError extends Error {
  readonly code: number = 0x1790;
  readonly name: string = 'ConnectionTargetAccountMissed';
  constructor() {
    super('Connection target account is missed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectionTargetAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new ConnectionTargetAccountMissedError());
createErrorFromNameLookup.set(
  'ConnectionTargetAccountMissed',
  () => new ConnectionTargetAccountMissedError(),
);

/**
 * ConnectionTargetAccountInvalid: 'Connection target account is invalid'
 *
 * @category Errors
 * @category generated
 */
export class ConnectionTargetAccountInvalidError extends Error {
  readonly code: number = 0x1791;
  readonly name: string = 'ConnectionTargetAccountInvalid';
  constructor() {
    super('Connection target account is invalid');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectionTargetAccountInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x1791, () => new ConnectionTargetAccountInvalidError());
createErrorFromNameLookup.set(
  'ConnectionTargetAccountInvalid',
  () => new ConnectionTargetAccountInvalidError(),
);

/**
 * ConnectionTargetAuthorityMismatch: 'Connection target authority mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ConnectionTargetAuthorityMismatchError extends Error {
  readonly code: number = 0x1792;
  readonly name: string = 'ConnectionTargetAuthorityMismatch';
  constructor() {
    super('Connection target authority mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectionTargetAuthorityMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new ConnectionTargetAuthorityMismatchError());
createErrorFromNameLookup.set(
  'ConnectionTargetAuthorityMismatch',
  () => new ConnectionTargetAuthorityMismatchError(),
);

/**
 * ConnectionValidationFail: 'Connection validation failed'
 *
 * @category Errors
 * @category generated
 */
export class ConnectionValidationFailError extends Error {
  readonly code: number = 0x1793;
  readonly name: string = 'ConnectionValidationFail';
  constructor() {
    super('Connection validation failed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectionValidationFailError);
    }
  }
}

createErrorFromCodeLookup.set(0x1793, () => new ConnectionValidationFailError());
createErrorFromNameLookup.set(
  'ConnectionValidationFail',
  () => new ConnectionValidationFailError(),
);

/**
 * AliasAccountExist: 'Alias account already exist'
 *
 * @category Errors
 * @category generated
 */
export class AliasAccountExistError extends Error {
  readonly code: number = 0x1794;
  readonly name: string = 'AliasAccountExist';
  constructor() {
    super('Alias account already exist');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasAccountExistError);
    }
  }
}

createErrorFromCodeLookup.set(0x1794, () => new AliasAccountExistError());
createErrorFromNameLookup.set('AliasAccountExist', () => new AliasAccountExistError());

/**
 * SelfPublicationCollecting: 'Forbidden to collect user's  own publication'
 *
 * @category Errors
 * @category generated
 */
export class SelfPublicationCollectingError extends Error {
  readonly code: number = 0x1795;
  readonly name: string = 'SelfPublicationCollecting';
  constructor() {
    super("Forbidden to collect user's  own publication");
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SelfPublicationCollectingError);
    }
  }
}

createErrorFromCodeLookup.set(0x1795, () => new SelfPublicationCollectingError());
createErrorFromNameLookup.set(
  'SelfPublicationCollecting',
  () => new SelfPublicationCollectingError(),
);

/**
 * PublicationTagIncorrect: 'Publication Tag is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class PublicationTagIncorrectError extends Error {
  readonly code: number = 0x1796;
  readonly name: string = 'PublicationTagIncorrect';
  constructor() {
    super('Publication Tag is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicationTagIncorrectError);
    }
  }
}

createErrorFromCodeLookup.set(0x1796, () => new PublicationTagIncorrectError());
createErrorFromNameLookup.set('PublicationTagIncorrect', () => new PublicationTagIncorrectError());

/**
 * RegisteringProcessorAccountMissed: 'Missed registering external processor account'
 *
 * @category Errors
 * @category generated
 */
export class RegisteringProcessorAccountMissedError extends Error {
  readonly code: number = 0x1797;
  readonly name: string = 'RegisteringProcessorAccountMissed';
  constructor() {
    super('Missed registering external processor account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RegisteringProcessorAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1797, () => new RegisteringProcessorAccountMissedError());
createErrorFromNameLookup.set(
  'RegisteringProcessorAccountMissed',
  () => new RegisteringProcessorAccountMissedError(),
);

/**
 * ConnectingProcessorAccountMissed: 'Missed connecting external processor account'
 *
 * @category Errors
 * @category generated
 */
export class ConnectingProcessorAccountMissedError extends Error {
  readonly code: number = 0x1798;
  readonly name: string = 'ConnectingProcessorAccountMissed';
  constructor() {
    super('Missed connecting external processor account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectingProcessorAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1798, () => new ConnectingProcessorAccountMissedError());
createErrorFromNameLookup.set(
  'ConnectingProcessorAccountMissed',
  () => new ConnectingProcessorAccountMissedError(),
);

/**
 * PublishingProcessorAccountMissed: 'Missed publishing external processor account'
 *
 * @category Errors
 * @category generated
 */
export class PublishingProcessorAccountMissedError extends Error {
  readonly code: number = 0x1799;
  readonly name: string = 'PublishingProcessorAccountMissed';
  constructor() {
    super('Missed publishing external processor account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublishingProcessorAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1799, () => new PublishingProcessorAccountMissedError());
createErrorFromNameLookup.set(
  'PublishingProcessorAccountMissed',
  () => new PublishingProcessorAccountMissedError(),
);

/**
 * CollectingProcessorAccountMissed: 'Missed collecting external processor account'
 *
 * @category Errors
 * @category generated
 */
export class CollectingProcessorAccountMissedError extends Error {
  readonly code: number = 0x179a;
  readonly name: string = 'CollectingProcessorAccountMissed';
  constructor() {
    super('Missed collecting external processor account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectingProcessorAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x179a, () => new CollectingProcessorAccountMissedError());
createErrorFromNameLookup.set(
  'CollectingProcessorAccountMissed',
  () => new CollectingProcessorAccountMissedError(),
);

/**
 * ReferencingProcessorAccountMissed: 'Missed referencing external processor account'
 *
 * @category Errors
 * @category generated
 */
export class ReferencingProcessorAccountMissedError extends Error {
  readonly code: number = 0x179b;
  readonly name: string = 'ReferencingProcessorAccountMissed';
  constructor() {
    super('Missed referencing external processor account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferencingProcessorAccountMissedError);
    }
  }
}

createErrorFromCodeLookup.set(0x179b, () => new ReferencingProcessorAccountMissedError());
createErrorFromNameLookup.set(
  'ReferencingProcessorAccountMissed',
  () => new ReferencingProcessorAccountMissedError(),
);

/**
 * RegisteringProcessorMismatch: 'Registering external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class RegisteringProcessorMismatchError extends Error {
  readonly code: number = 0x179c;
  readonly name: string = 'RegisteringProcessorMismatch';
  constructor() {
    super('Registering external processor mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RegisteringProcessorMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x179c, () => new RegisteringProcessorMismatchError());
createErrorFromNameLookup.set(
  'RegisteringProcessorMismatch',
  () => new RegisteringProcessorMismatchError(),
);

/**
 * ConnectingProcessorMismatch: 'Connecting external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ConnectingProcessorMismatchError extends Error {
  readonly code: number = 0x179d;
  readonly name: string = 'ConnectingProcessorMismatch';
  constructor() {
    super('Connecting external processor mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectingProcessorMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x179d, () => new ConnectingProcessorMismatchError());
createErrorFromNameLookup.set(
  'ConnectingProcessorMismatch',
  () => new ConnectingProcessorMismatchError(),
);

/**
 * PublishingProcessorMismatch: 'Publishing external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class PublishingProcessorMismatchError extends Error {
  readonly code: number = 0x179e;
  readonly name: string = 'PublishingProcessorMismatch';
  constructor() {
    super('Publishing external processor mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublishingProcessorMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x179e, () => new PublishingProcessorMismatchError());
createErrorFromNameLookup.set(
  'PublishingProcessorMismatch',
  () => new PublishingProcessorMismatchError(),
);

/**
 * CollectingProcessorMismatch: 'Collecting external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class CollectingProcessorMismatchError extends Error {
  readonly code: number = 0x179f;
  readonly name: string = 'CollectingProcessorMismatch';
  constructor() {
    super('Collecting external processor mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectingProcessorMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x179f, () => new CollectingProcessorMismatchError());
createErrorFromNameLookup.set(
  'CollectingProcessorMismatch',
  () => new CollectingProcessorMismatchError(),
);

/**
 * ReferencingProcessorMismatch: 'Referencing external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ReferencingProcessorMismatchError extends Error {
  readonly code: number = 0x17a0;
  readonly name: string = 'ReferencingProcessorMismatch';
  constructor() {
    super('Referencing external processor mismatch');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferencingProcessorMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x17a0, () => new ReferencingProcessorMismatchError());
createErrorFromNameLookup.set(
  'ReferencingProcessorMismatch',
  () => new ReferencingProcessorMismatchError(),
);

/**
 * ReactionTargetAccountInvalid: 'Reaction target account is invalid'
 *
 * @category Errors
 * @category generated
 */
export class ReactionTargetAccountInvalidError extends Error {
  readonly code: number = 0x17a1;
  readonly name: string = 'ReactionTargetAccountInvalid';
  constructor() {
    super('Reaction target account is invalid');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReactionTargetAccountInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x17a1, () => new ReactionTargetAccountInvalidError());
createErrorFromNameLookup.set(
  'ReactionTargetAccountInvalid',
  () => new ReactionTargetAccountInvalidError(),
);

/**
 * ReportTargetAccountInvalid: 'Report target account is invalid'
 *
 * @category Errors
 * @category generated
 */
export class ReportTargetAccountInvalidError extends Error {
  readonly code: number = 0x17a2;
  readonly name: string = 'ReportTargetAccountInvalid';
  constructor() {
    super('Report target account is invalid');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReportTargetAccountInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x17a2, () => new ReportTargetAccountInvalidError());
createErrorFromNameLookup.set(
  'ReportTargetAccountInvalid',
  () => new ReportTargetAccountInvalidError(),
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
