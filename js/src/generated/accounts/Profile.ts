/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Gender, genderBeet } from '../types/Gender';
import { LocationCoordinates, locationCoordinatesBeet } from '../types/LocationCoordinates';

/**
 * Arguments used to create {@link Profile}
 * @category Accounts
 * @category generated
 */
export type ProfileArgs = {
  app: web3.PublicKey;
  authority: web3.PublicKey;
  exchangeKey: web3.PublicKey;
  isVerified: boolean;
  countryCode: number;
  regionCode: number;
  cityCode: number;
  firstName: number[] /* size: 20 */;
  lastName: number[] /* size: 30 */;
  birthDate: beet.bignum;
  searchable10Years: beet.bignum;
  searchable5Years: beet.bignum;
  searchableWeek: beet.bignum;
  searchableDay: beet.bignum;
  gender: beet.COption<Gender>;
  alias: beet.COption<string>;
  statusText: string;
  metadataUri: beet.COption<string>;
  currentLocation: beet.COption<LocationCoordinates>;
  connectingProcessor: beet.COption<web3.PublicKey>;
  createdAt: beet.bignum;
  modifiedAt: beet.COption<beet.bignum>;
  reserved1: number[] /* size: 32 */;
  reserved2: number[] /* size: 32 */;
  reserved3: number[] /* size: 32 */;
};

export const profileDiscriminator = [184, 101, 165, 188, 95, 63, 127, 188];
/**
 * Holds the data for the {@link Profile} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Profile implements ProfileArgs {
  private constructor(
    readonly app: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly exchangeKey: web3.PublicKey,
    readonly isVerified: boolean,
    readonly countryCode: number,
    readonly regionCode: number,
    readonly cityCode: number,
    readonly firstName: number[] /* size: 20 */,
    readonly lastName: number[] /* size: 30 */,
    readonly birthDate: beet.bignum,
    readonly searchable10Years: beet.bignum,
    readonly searchable5Years: beet.bignum,
    readonly searchableWeek: beet.bignum,
    readonly searchableDay: beet.bignum,
    readonly gender: beet.COption<Gender>,
    readonly alias: beet.COption<string>,
    readonly statusText: string,
    readonly metadataUri: beet.COption<string>,
    readonly currentLocation: beet.COption<LocationCoordinates>,
    readonly connectingProcessor: beet.COption<web3.PublicKey>,
    readonly createdAt: beet.bignum,
    readonly modifiedAt: beet.COption<beet.bignum>,
    readonly reserved1: number[] /* size: 32 */,
    readonly reserved2: number[] /* size: 32 */,
    readonly reserved3: number[] /* size: 32 */,
  ) {}

  /**
   * Creates a {@link Profile} instance from the provided args.
   */
  static fromArgs(args: ProfileArgs) {
    return new Profile(
      args.app,
      args.authority,
      args.exchangeKey,
      args.isVerified,
      args.countryCode,
      args.regionCode,
      args.cityCode,
      args.firstName,
      args.lastName,
      args.birthDate,
      args.searchable10Years,
      args.searchable5Years,
      args.searchableWeek,
      args.searchableDay,
      args.gender,
      args.alias,
      args.statusText,
      args.metadataUri,
      args.currentLocation,
      args.connectingProcessor,
      args.createdAt,
      args.modifiedAt,
      args.reserved1,
      args.reserved2,
      args.reserved3,
    );
  }

  /**
   * Deserializes the {@link Profile} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Profile, number] {
    return Profile.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Profile} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Profile> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find Profile account at ${address}`);
    }
    return Profile.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, profileBeet);
  }

  /**
   * Deserializes the {@link Profile} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Profile, number] {
    return profileBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Profile} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return profileBeet.serialize({
      accountDiscriminator: profileDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Profile} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProfileArgs) {
    const instance = Profile.fromArgs(args);
    return profileBeet.toFixedFromValue({
      accountDiscriminator: profileDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Profile} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProfileArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Profile.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Profile} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      app: this.app.toBase58(),
      authority: this.authority.toBase58(),
      exchangeKey: this.exchangeKey.toBase58(),
      isVerified: this.isVerified,
      countryCode: this.countryCode,
      regionCode: this.regionCode,
      cityCode: this.cityCode,
      firstName: this.firstName,
      lastName: this.lastName,
      birthDate: (() => {
        const x = <{ toNumber: () => number }>this.birthDate;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      searchable10Years: (() => {
        const x = <{ toNumber: () => number }>this.searchable10Years;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      searchable5Years: (() => {
        const x = <{ toNumber: () => number }>this.searchable5Years;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      searchableWeek: (() => {
        const x = <{ toNumber: () => number }>this.searchableWeek;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      searchableDay: (() => {
        const x = <{ toNumber: () => number }>this.searchableDay;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      gender: this.gender,
      alias: this.alias,
      statusText: this.statusText,
      metadataUri: this.metadataUri,
      currentLocation: this.currentLocation,
      connectingProcessor: this.connectingProcessor,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      modifiedAt: this.modifiedAt,
      reserved1: this.reserved1,
      reserved2: this.reserved2,
      reserved3: this.reserved3,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const profileBeet = new beet.FixableBeetStruct<
  Profile,
  ProfileArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['app', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['exchangeKey', beetSolana.publicKey],
    ['isVerified', beet.bool],
    ['countryCode', beet.u16],
    ['regionCode', beet.u16],
    ['cityCode', beet.u16],
    ['firstName', beet.uniformFixedSizeArray(beet.u8, 20)],
    ['lastName', beet.uniformFixedSizeArray(beet.u8, 30)],
    ['birthDate', beet.i64],
    ['searchable10Years', beet.i64],
    ['searchable5Years', beet.i64],
    ['searchableWeek', beet.i64],
    ['searchableDay', beet.i64],
    ['gender', beet.coption(genderBeet)],
    ['alias', beet.coption(beet.utf8String)],
    ['statusText', beet.utf8String],
    ['metadataUri', beet.coption(beet.utf8String)],
    ['currentLocation', beet.coption(locationCoordinatesBeet)],
    ['connectingProcessor', beet.coption(beetSolana.publicKey)],
    ['createdAt', beet.i64],
    ['modifiedAt', beet.coption(beet.i64)],
    ['reserved1', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved2', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved3', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  Profile.fromArgs,
  'Profile',
);
