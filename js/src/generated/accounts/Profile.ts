/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Gender, genderBeet } from '../types/Gender';

/**
 * Arguments used to create {@link Profile}
 * @category Accounts
 * @category generated
 */
export type ProfileArgs = {
  app: web3.PublicKey;
  authority: web3.PublicKey;
  exchangeKey: web3.PublicKey;
  isVerified: boolean;
  gender: Gender;
  personalData1: number;
  personalData2: number;
  personalData3: number;
  personalData4: number;
  personalData5: number;
  personalData6: number;
  personalData7: number;
  personalData8: number;
  reserved1: number;
  reserved2: number;
  reserved3: number;
  reserved4: number;
  reserved5: beet.bignum;
  reserved6: beet.bignum;
  reserved7: number[] /* size: 32 */;
  reserved8: number[] /* size: 32 */;
  firstName: number[] /* size: 32 */;
  lastName: number[] /* size: 32 */;
  birthDate: beet.bignum;
  birthDate10Years: beet.bignum;
  birthDate5Years: beet.bignum;
  birthDateYear: beet.bignum;
  countryCode: number;
  regionCode: number;
  cityCode: number;
  creationYear: beet.bignum;
  creationMonth: beet.bignum;
  creationWeek: beet.bignum;
  creationDay: beet.bignum;
  alias: beet.COption<string>;
  metadataUri: beet.COption<string>;
  connectingProcessor: beet.COption<web3.PublicKey>;
  createdAt: beet.bignum;
  modifiedAt: beet.COption<beet.bignum>;
};

export const profileDiscriminator = [184, 101, 165, 188, 95, 63, 127, 188];
/**
 * Holds the data for the {@link Profile} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Profile implements ProfileArgs {
  private constructor(
    readonly app: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly exchangeKey: web3.PublicKey,
    readonly isVerified: boolean,
    readonly gender: Gender,
    readonly personalData1: number,
    readonly personalData2: number,
    readonly personalData3: number,
    readonly personalData4: number,
    readonly personalData5: number,
    readonly personalData6: number,
    readonly personalData7: number,
    readonly personalData8: number,
    readonly reserved1: number,
    readonly reserved2: number,
    readonly reserved3: number,
    readonly reserved4: number,
    readonly reserved5: beet.bignum,
    readonly reserved6: beet.bignum,
    readonly reserved7: number[] /* size: 32 */,
    readonly reserved8: number[] /* size: 32 */,
    readonly firstName: number[] /* size: 32 */,
    readonly lastName: number[] /* size: 32 */,
    readonly birthDate: beet.bignum,
    readonly birthDate10Years: beet.bignum,
    readonly birthDate5Years: beet.bignum,
    readonly birthDateYear: beet.bignum,
    readonly countryCode: number,
    readonly regionCode: number,
    readonly cityCode: number,
    readonly creationYear: beet.bignum,
    readonly creationMonth: beet.bignum,
    readonly creationWeek: beet.bignum,
    readonly creationDay: beet.bignum,
    readonly alias: beet.COption<string>,
    readonly metadataUri: beet.COption<string>,
    readonly connectingProcessor: beet.COption<web3.PublicKey>,
    readonly createdAt: beet.bignum,
    readonly modifiedAt: beet.COption<beet.bignum>,
  ) {}

  /**
   * Creates a {@link Profile} instance from the provided args.
   */
  static fromArgs(args: ProfileArgs) {
    return new Profile(
      args.app,
      args.authority,
      args.exchangeKey,
      args.isVerified,
      args.gender,
      args.personalData1,
      args.personalData2,
      args.personalData3,
      args.personalData4,
      args.personalData5,
      args.personalData6,
      args.personalData7,
      args.personalData8,
      args.reserved1,
      args.reserved2,
      args.reserved3,
      args.reserved4,
      args.reserved5,
      args.reserved6,
      args.reserved7,
      args.reserved8,
      args.firstName,
      args.lastName,
      args.birthDate,
      args.birthDate10Years,
      args.birthDate5Years,
      args.birthDateYear,
      args.countryCode,
      args.regionCode,
      args.cityCode,
      args.creationYear,
      args.creationMonth,
      args.creationWeek,
      args.creationDay,
      args.alias,
      args.metadataUri,
      args.connectingProcessor,
      args.createdAt,
      args.modifiedAt,
    );
  }

  /**
   * Deserializes the {@link Profile} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Profile, number] {
    return Profile.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Profile} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Profile> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find Profile account at ${address}`);
    }
    return Profile.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, profileBeet);
  }

  /**
   * Deserializes the {@link Profile} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Profile, number] {
    return profileBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Profile} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return profileBeet.serialize({
      accountDiscriminator: profileDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Profile} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProfileArgs) {
    const instance = Profile.fromArgs(args);
    return profileBeet.toFixedFromValue({
      accountDiscriminator: profileDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Profile} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProfileArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Profile.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Profile} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      app: this.app.toBase58(),
      authority: this.authority.toBase58(),
      exchangeKey: this.exchangeKey.toBase58(),
      isVerified: this.isVerified,
      gender: 'Gender.' + Gender[this.gender],
      personalData1: this.personalData1,
      personalData2: this.personalData2,
      personalData3: this.personalData3,
      personalData4: this.personalData4,
      personalData5: this.personalData5,
      personalData6: this.personalData6,
      personalData7: this.personalData7,
      personalData8: this.personalData8,
      reserved1: this.reserved1,
      reserved2: this.reserved2,
      reserved3: this.reserved3,
      reserved4: this.reserved4,
      reserved5: (() => {
        const x = <{ toNumber: () => number }>this.reserved5;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      reserved6: (() => {
        const x = <{ toNumber: () => number }>this.reserved6;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      reserved7: this.reserved7,
      reserved8: this.reserved8,
      firstName: this.firstName,
      lastName: this.lastName,
      birthDate: (() => {
        const x = <{ toNumber: () => number }>this.birthDate;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      birthDate10Years: (() => {
        const x = <{ toNumber: () => number }>this.birthDate10Years;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      birthDate5Years: (() => {
        const x = <{ toNumber: () => number }>this.birthDate5Years;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      birthDateYear: (() => {
        const x = <{ toNumber: () => number }>this.birthDateYear;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      countryCode: this.countryCode,
      regionCode: this.regionCode,
      cityCode: this.cityCode,
      creationYear: (() => {
        const x = <{ toNumber: () => number }>this.creationYear;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationMonth: (() => {
        const x = <{ toNumber: () => number }>this.creationMonth;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationWeek: (() => {
        const x = <{ toNumber: () => number }>this.creationWeek;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationDay: (() => {
        const x = <{ toNumber: () => number }>this.creationDay;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      alias: this.alias,
      metadataUri: this.metadataUri,
      connectingProcessor: this.connectingProcessor,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      modifiedAt: this.modifiedAt,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const profileBeet = new beet.FixableBeetStruct<
  Profile,
  ProfileArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['app', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['exchangeKey', beetSolana.publicKey],
    ['isVerified', beet.bool],
    ['gender', genderBeet],
    ['personalData1', beet.u8],
    ['personalData2', beet.u8],
    ['personalData3', beet.u8],
    ['personalData4', beet.u8],
    ['personalData5', beet.u8],
    ['personalData6', beet.u8],
    ['personalData7', beet.u8],
    ['personalData8', beet.u8],
    ['reserved1', beet.i16],
    ['reserved2', beet.i16],
    ['reserved3', beet.i32],
    ['reserved4', beet.i32],
    ['reserved5', beet.i64],
    ['reserved6', beet.i64],
    ['reserved7', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved8', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['firstName', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['lastName', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['birthDate', beet.i64],
    ['birthDate10Years', beet.i64],
    ['birthDate5Years', beet.i64],
    ['birthDateYear', beet.i64],
    ['countryCode', beet.u16],
    ['regionCode', beet.u16],
    ['cityCode', beet.u16],
    ['creationYear', beet.i64],
    ['creationMonth', beet.i64],
    ['creationWeek', beet.i64],
    ['creationDay', beet.i64],
    ['alias', beet.coption(beet.utf8String)],
    ['metadataUri', beet.coption(beet.utf8String)],
    ['connectingProcessor', beet.coption(beetSolana.publicKey)],
    ['createdAt', beet.i64],
    ['modifiedAt', beet.coption(beet.i64)],
  ],
  Profile.fromArgs,
  'Profile',
);
