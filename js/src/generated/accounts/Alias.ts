/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';
import { AliasType, aliasTypeBeet } from '../types/AliasType';

/**
 * Arguments used to create {@link Alias}
 * @category Accounts
 * @category generated
 */
export type AliasArgs = {
  app: web3.PublicKey;
  aliasType: AliasType;
  owner: web3.PublicKey;
  authority: web3.PublicKey;
  value: string;
};

export const aliasDiscriminator = [175, 23, 49, 34, 113, 79, 229, 204];
/**
 * Holds the data for the {@link Alias} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Alias implements AliasArgs {
  private constructor(
    readonly app: web3.PublicKey,
    readonly aliasType: AliasType,
    readonly owner: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly value: string,
  ) {}

  /**
   * Creates a {@link Alias} instance from the provided args.
   */
  static fromArgs(args: AliasArgs) {
    return new Alias(args.app, args.aliasType, args.owner, args.authority, args.value);
  }

  /**
   * Deserializes the {@link Alias} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Alias, number] {
    return Alias.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Alias} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Alias> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find Alias account at ${address}`);
    }
    return Alias.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, aliasBeet);
  }

  /**
   * Deserializes the {@link Alias} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Alias, number] {
    return aliasBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Alias} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return aliasBeet.serialize({
      accountDiscriminator: aliasDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Alias} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AliasArgs) {
    const instance = Alias.fromArgs(args);
    return aliasBeet.toFixedFromValue({
      accountDiscriminator: aliasDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Alias} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AliasArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Alias.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Alias} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      app: this.app.toBase58(),
      aliasType: 'AliasType.' + AliasType[this.aliasType],
      owner: this.owner.toBase58(),
      authority: this.authority.toBase58(),
      value: this.value,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const aliasBeet = new beet.FixableBeetStruct<
  Alias,
  AliasArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['app', beetSolana.publicKey],
    ['aliasType', aliasTypeBeet],
    ['owner', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['value', beet.utf8String],
  ],
  Alias.fromArgs,
  'Alias',
);
