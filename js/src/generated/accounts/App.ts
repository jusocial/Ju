/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link App}
 * @category Accounts
 * @category generated
 */
export type AppArgs = {
  authority: web3.PublicKey;
  profileMetadataRequired: boolean;
  subspaceMetadataRequired: boolean;
  profileDeleteAllowed: boolean;
  subspaceDeleteAllowed: boolean;
  publicationDeleteAllowed: boolean;
  profileIndividualProcessorsAllowed: boolean;
  subspaceIndividualProcessorsAllowed: boolean;
  publicationIndividualProcessorsAllowed: boolean;
  appName: string;
  metadataUri: beet.COption<string>;
  registeringProcessor: beet.COption<web3.PublicKey>;
  connectingProcessor: beet.COption<web3.PublicKey>;
  publishingProcessor: beet.COption<web3.PublicKey>;
  collectingProcessor: beet.COption<web3.PublicKey>;
  referencingProcessor: beet.COption<web3.PublicKey>;
  reserved1: number[] /* size: 32 */;
  reserved2: number[] /* size: 32 */;
  reserved3: number[] /* size: 32 */;
};

export const appDiscriminator = [67, 135, 84, 79, 153, 49, 239, 169];
/**
 * Holds the data for the {@link App} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class App implements AppArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly profileMetadataRequired: boolean,
    readonly subspaceMetadataRequired: boolean,
    readonly profileDeleteAllowed: boolean,
    readonly subspaceDeleteAllowed: boolean,
    readonly publicationDeleteAllowed: boolean,
    readonly profileIndividualProcessorsAllowed: boolean,
    readonly subspaceIndividualProcessorsAllowed: boolean,
    readonly publicationIndividualProcessorsAllowed: boolean,
    readonly appName: string,
    readonly metadataUri: beet.COption<string>,
    readonly registeringProcessor: beet.COption<web3.PublicKey>,
    readonly connectingProcessor: beet.COption<web3.PublicKey>,
    readonly publishingProcessor: beet.COption<web3.PublicKey>,
    readonly collectingProcessor: beet.COption<web3.PublicKey>,
    readonly referencingProcessor: beet.COption<web3.PublicKey>,
    readonly reserved1: number[] /* size: 32 */,
    readonly reserved2: number[] /* size: 32 */,
    readonly reserved3: number[] /* size: 32 */,
  ) {}

  /**
   * Creates a {@link App} instance from the provided args.
   */
  static fromArgs(args: AppArgs) {
    return new App(
      args.authority,
      args.profileMetadataRequired,
      args.subspaceMetadataRequired,
      args.profileDeleteAllowed,
      args.subspaceDeleteAllowed,
      args.publicationDeleteAllowed,
      args.profileIndividualProcessorsAllowed,
      args.subspaceIndividualProcessorsAllowed,
      args.publicationIndividualProcessorsAllowed,
      args.appName,
      args.metadataUri,
      args.registeringProcessor,
      args.connectingProcessor,
      args.publishingProcessor,
      args.collectingProcessor,
      args.referencingProcessor,
      args.reserved1,
      args.reserved2,
      args.reserved3,
    );
  }

  /**
   * Deserializes the {@link App} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [App, number] {
    return App.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link App} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<App> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find App account at ${address}`);
    }
    return App.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, appBeet);
  }

  /**
   * Deserializes the {@link App} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [App, number] {
    return appBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link App} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return appBeet.serialize({
      accountDiscriminator: appDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link App} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AppArgs) {
    const instance = App.fromArgs(args);
    return appBeet.toFixedFromValue({
      accountDiscriminator: appDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link App} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AppArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(App.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link App} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      profileMetadataRequired: this.profileMetadataRequired,
      subspaceMetadataRequired: this.subspaceMetadataRequired,
      profileDeleteAllowed: this.profileDeleteAllowed,
      subspaceDeleteAllowed: this.subspaceDeleteAllowed,
      publicationDeleteAllowed: this.publicationDeleteAllowed,
      profileIndividualProcessorsAllowed: this.profileIndividualProcessorsAllowed,
      subspaceIndividualProcessorsAllowed: this.subspaceIndividualProcessorsAllowed,
      publicationIndividualProcessorsAllowed: this.publicationIndividualProcessorsAllowed,
      appName: this.appName,
      metadataUri: this.metadataUri,
      registeringProcessor: this.registeringProcessor,
      connectingProcessor: this.connectingProcessor,
      publishingProcessor: this.publishingProcessor,
      collectingProcessor: this.collectingProcessor,
      referencingProcessor: this.referencingProcessor,
      reserved1: this.reserved1,
      reserved2: this.reserved2,
      reserved3: this.reserved3,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const appBeet = new beet.FixableBeetStruct<
  App,
  AppArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['profileMetadataRequired', beet.bool],
    ['subspaceMetadataRequired', beet.bool],
    ['profileDeleteAllowed', beet.bool],
    ['subspaceDeleteAllowed', beet.bool],
    ['publicationDeleteAllowed', beet.bool],
    ['profileIndividualProcessorsAllowed', beet.bool],
    ['subspaceIndividualProcessorsAllowed', beet.bool],
    ['publicationIndividualProcessorsAllowed', beet.bool],
    ['appName', beet.utf8String],
    ['metadataUri', beet.coption(beet.utf8String)],
    ['registeringProcessor', beet.coption(beetSolana.publicKey)],
    ['connectingProcessor', beet.coption(beetSolana.publicKey)],
    ['publishingProcessor', beet.coption(beetSolana.publicKey)],
    ['collectingProcessor', beet.coption(beetSolana.publicKey)],
    ['referencingProcessor', beet.coption(beetSolana.publicKey)],
    ['reserved1', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved2', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved3', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  App.fromArgs,
  'App',
);
