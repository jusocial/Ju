/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import {
  SubspacePublishingPermissionLevel,
  subspacePublishingPermissionLevelBeet,
} from '../types/SubspacePublishingPermissionLevel';

/**
 * Arguments used to create {@link Subspace}
 * @category Accounts
 * @category generated
 */
export type SubspaceArgs = {
  app: web3.PublicKey;
  authority: web3.PublicKey;
  exchangeKey: web3.PublicKey;
  creator: web3.PublicKey;
  publishingPermission: SubspacePublishingPermissionLevel;
  name: number[] /* size: 32 */;
  reserved1: number;
  reserved2: number;
  reserved3: number;
  reserved4: number;
  reserved5: number[] /* size: 32 */;
  reserved6: number[] /* size: 32 */;
  creationYear: beet.bignum;
  creationMonth: beet.bignum;
  creationWeek: beet.bignum;
  creationDay: beet.bignum;
  alias: beet.COption<string>;
  uuid: string;
  metadataUri: beet.COption<string>;
  publishingProcessor: beet.COption<web3.PublicKey>;
  connectingProcessor: beet.COption<web3.PublicKey>;
  collectingProcessor: beet.COption<web3.PublicKey>;
  referencingProcessor: beet.COption<web3.PublicKey>;
  createdAt: beet.bignum;
};

export const subspaceDiscriminator = [105, 6, 104, 112, 174, 108, 161, 167];
/**
 * Holds the data for the {@link Subspace} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Subspace implements SubspaceArgs {
  private constructor(
    readonly app: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly exchangeKey: web3.PublicKey,
    readonly creator: web3.PublicKey,
    readonly publishingPermission: SubspacePublishingPermissionLevel,
    readonly name: number[] /* size: 32 */,
    readonly reserved1: number,
    readonly reserved2: number,
    readonly reserved3: number,
    readonly reserved4: number,
    readonly reserved5: number[] /* size: 32 */,
    readonly reserved6: number[] /* size: 32 */,
    readonly creationYear: beet.bignum,
    readonly creationMonth: beet.bignum,
    readonly creationWeek: beet.bignum,
    readonly creationDay: beet.bignum,
    readonly alias: beet.COption<string>,
    readonly uuid: string,
    readonly metadataUri: beet.COption<string>,
    readonly publishingProcessor: beet.COption<web3.PublicKey>,
    readonly connectingProcessor: beet.COption<web3.PublicKey>,
    readonly collectingProcessor: beet.COption<web3.PublicKey>,
    readonly referencingProcessor: beet.COption<web3.PublicKey>,
    readonly createdAt: beet.bignum,
  ) {}

  /**
   * Creates a {@link Subspace} instance from the provided args.
   */
  static fromArgs(args: SubspaceArgs) {
    return new Subspace(
      args.app,
      args.authority,
      args.exchangeKey,
      args.creator,
      args.publishingPermission,
      args.name,
      args.reserved1,
      args.reserved2,
      args.reserved3,
      args.reserved4,
      args.reserved5,
      args.reserved6,
      args.creationYear,
      args.creationMonth,
      args.creationWeek,
      args.creationDay,
      args.alias,
      args.uuid,
      args.metadataUri,
      args.publishingProcessor,
      args.connectingProcessor,
      args.collectingProcessor,
      args.referencingProcessor,
      args.createdAt,
    );
  }

  /**
   * Deserializes the {@link Subspace} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Subspace, number] {
    return Subspace.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Subspace} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Subspace> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find Subspace account at ${address}`);
    }
    return Subspace.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, subspaceBeet);
  }

  /**
   * Deserializes the {@link Subspace} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Subspace, number] {
    return subspaceBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Subspace} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return subspaceBeet.serialize({
      accountDiscriminator: subspaceDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Subspace} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: SubspaceArgs) {
    const instance = Subspace.fromArgs(args);
    return subspaceBeet.toFixedFromValue({
      accountDiscriminator: subspaceDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Subspace} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: SubspaceArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Subspace.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Subspace} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      app: this.app.toBase58(),
      authority: this.authority.toBase58(),
      exchangeKey: this.exchangeKey.toBase58(),
      creator: this.creator.toBase58(),
      publishingPermission:
        'SubspacePublishingPermissionLevel.' +
        SubspacePublishingPermissionLevel[this.publishingPermission],
      name: this.name,
      reserved1: this.reserved1,
      reserved2: this.reserved2,
      reserved3: this.reserved3,
      reserved4: this.reserved4,
      reserved5: this.reserved5,
      reserved6: this.reserved6,
      creationYear: (() => {
        const x = <{ toNumber: () => number }>this.creationYear;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationMonth: (() => {
        const x = <{ toNumber: () => number }>this.creationMonth;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationWeek: (() => {
        const x = <{ toNumber: () => number }>this.creationWeek;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      creationDay: (() => {
        const x = <{ toNumber: () => number }>this.creationDay;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      alias: this.alias,
      uuid: this.uuid,
      metadataUri: this.metadataUri,
      publishingProcessor: this.publishingProcessor,
      connectingProcessor: this.connectingProcessor,
      collectingProcessor: this.collectingProcessor,
      referencingProcessor: this.referencingProcessor,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const subspaceBeet = new beet.FixableBeetStruct<
  Subspace,
  SubspaceArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['app', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['exchangeKey', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['publishingPermission', subspacePublishingPermissionLevelBeet],
    ['name', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved1', beet.u8],
    ['reserved2', beet.u8],
    ['reserved3', beet.u8],
    ['reserved4', beet.u8],
    ['reserved5', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['reserved6', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creationYear', beet.i64],
    ['creationMonth', beet.i64],
    ['creationWeek', beet.i64],
    ['creationDay', beet.i64],
    ['alias', beet.coption(beet.utf8String)],
    ['uuid', beet.utf8String],
    ['metadataUri', beet.coption(beet.utf8String)],
    ['publishingProcessor', beet.coption(beetSolana.publicKey)],
    ['connectingProcessor', beet.coption(beetSolana.publicKey)],
    ['collectingProcessor', beet.coption(beetSolana.publicKey)],
    ['referencingProcessor', beet.coption(beetSolana.publicKey)],
    ['createdAt', beet.i64],
  ],
  Subspace.fromArgs,
  'Subspace',
);
