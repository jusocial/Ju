/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * Arguments used to create {@link DeveloperWhitelistProof}
 * @category Accounts
 * @category generated
 */
export type DeveloperWhitelistProofArgs = {
  authority: web3.PublicKey;
  developer: web3.PublicKey;
};

export const developerWhitelistProofDiscriminator = [151, 62, 246, 164, 78, 115, 182, 59];
/**
 * Holds the data for the {@link DeveloperWhitelistProof} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class DeveloperWhitelistProof implements DeveloperWhitelistProofArgs {
  private constructor(readonly authority: web3.PublicKey, readonly developer: web3.PublicKey) {}

  /**
   * Creates a {@link DeveloperWhitelistProof} instance from the provided args.
   */
  static fromArgs(args: DeveloperWhitelistProofArgs) {
    return new DeveloperWhitelistProof(args.authority, args.developer);
  }

  /**
   * Deserializes the {@link DeveloperWhitelistProof} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [DeveloperWhitelistProof, number] {
    return DeveloperWhitelistProof.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link DeveloperWhitelistProof} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<DeveloperWhitelistProof> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find DeveloperWhitelistProof account at ${address}`);
    }
    return DeveloperWhitelistProof.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, developerWhitelistProofBeet);
  }

  /**
   * Deserializes the {@link DeveloperWhitelistProof} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [DeveloperWhitelistProof, number] {
    return developerWhitelistProofBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link DeveloperWhitelistProof} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return developerWhitelistProofBeet.serialize({
      accountDiscriminator: developerWhitelistProofDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link DeveloperWhitelistProof}
   */
  static get byteSize() {
    return developerWhitelistProofBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link DeveloperWhitelistProof} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      DeveloperWhitelistProof.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link DeveloperWhitelistProof} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === DeveloperWhitelistProof.byteSize;
  }

  /**
   * Returns a readable version of {@link DeveloperWhitelistProof} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      developer: this.developer.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const developerWhitelistProofBeet = new beet.BeetStruct<
  DeveloperWhitelistProof,
  DeveloperWhitelistProofArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['developer', beetSolana.publicKey],
  ],
  DeveloperWhitelistProof.fromArgs,
  'DeveloperWhitelistProof',
);
