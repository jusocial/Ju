/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category CollectPublication
 * @category generated
 */
export type CollectPublicationInstructionArgs = {
  externalProcessingData: beet.COption<string>;
};
/**
 * @category Instructions
 * @category CollectPublication
 * @category generated
 */
export const collectPublicationStruct = new beet.FixableBeetArgsStruct<
  CollectPublicationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['externalProcessingData', beet.coption(beet.utf8String)],
  ],
  'CollectPublicationInstructionArgs',
);
/**
 * Accounts required by the _collectPublication_ instruction
 *
 * @property [] app
 * @property [] initializer
 * @property [] target
 * @property [_writable_] collectionItem
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CollectPublication
 * @category generated
 */
export type CollectPublicationInstructionAccounts = {
  app: web3.PublicKey;
  initializer: web3.PublicKey;
  target: web3.PublicKey;
  collectionItem: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const collectPublicationInstructionDiscriminator = [103, 55, 47, 17, 105, 5, 20, 198];

/**
 * Creates a _CollectPublication_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CollectPublication
 * @category generated
 */
export function createCollectPublicationInstruction(
  accounts: CollectPublicationInstructionAccounts,
  args: CollectPublicationInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
) {
  const [data] = collectPublicationStruct.serialize({
    instructionDiscriminator: collectPublicationInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.initializer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.target,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionItem,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
