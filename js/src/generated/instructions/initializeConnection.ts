/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category InitializeConnection
 * @category generated
 */
export type InitializeConnectionInstructionArgs = {
  externalProcessingData: beet.COption<string>;
};
/**
 * @category Instructions
 * @category InitializeConnection
 * @category generated
 */
export const initializeConnectionStruct = new beet.FixableBeetArgsStruct<
  InitializeConnectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['externalProcessingData', beet.coption(beet.utf8String)],
  ],
  'InitializeConnectionInstructionArgs',
);
/**
 * Accounts required by the _initializeConnection_ instruction
 *
 * @property [] app
 * @property [_writable_] connection
 * @property [] initializer
 * @property [] target
 * @property [] connectingProcessor (optional)
 * @property [] connectingProcessorIndividual (optional)
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category InitializeConnection
 * @category generated
 */
export type InitializeConnectionInstructionAccounts = {
  app: web3.PublicKey;
  connection: web3.PublicKey;
  initializer: web3.PublicKey;
  target: web3.PublicKey;
  connectingProcessor?: web3.PublicKey;
  connectingProcessorIndividual?: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const initializeConnectionInstructionDiscriminator = [119, 77, 251, 72, 87, 7, 90, 4];

/**
 * Creates a _InitializeConnection_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeConnection
 * @category generated
 */
export function createInitializeConnectionInstruction(
  accounts: InitializeConnectionInstructionAccounts,
  args: InitializeConnectionInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
) {
  const [data] = initializeConnectionStruct.serialize({
    instructionDiscriminator: initializeConnectionInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.connection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.initializer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.target,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.connectingProcessor != null) {
    keys.push({
      pubkey: accounts.connectingProcessor,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.connectingProcessorIndividual != null) {
    if (accounts.connectingProcessor == null) {
      throw new Error(
        "When providing 'connectingProcessorIndividual' then 'accounts.connectingProcessor' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.connectingProcessorIndividual,
      isWritable: false,
      isSigner: false,
    });
  }
  keys.push({
    pubkey: accounts.authority,
    isWritable: true,
    isSigner: true,
  });
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  });

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
