/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  SubspaceManagementRoleType,
  subspaceManagementRoleTypeBeet,
} from '../types/SubspaceManagementRoleType';

/**
 * @category Instructions
 * @category AddSubspaceManager
 * @category generated
 */
export type AddSubspaceManagerInstructionArgs = {
  managerRole: SubspaceManagementRoleType;
};
/**
 * @category Instructions
 * @category AddSubspaceManager
 * @category generated
 */
export const addSubspaceManagerStruct = new beet.BeetArgsStruct<
  AddSubspaceManagerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['managerRole', subspaceManagementRoleTypeBeet],
  ],
  'AddSubspaceManagerInstructionArgs',
);
/**
 * Accounts required by the _addSubspaceManager_ instruction
 *
 * @property [] app
 * @property [] subspace
 * @property [] profile
 * @property [] connectionProof
 * @property [_writable_] manager
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category AddSubspaceManager
 * @category generated
 */
export type AddSubspaceManagerInstructionAccounts = {
  app: web3.PublicKey;
  subspace: web3.PublicKey;
  profile: web3.PublicKey;
  connectionProof: web3.PublicKey;
  manager: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const addSubspaceManagerInstructionDiscriminator = [95, 150, 153, 247, 136, 209, 37, 154];

/**
 * Creates a _AddSubspaceManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddSubspaceManager
 * @category generated
 */
export function createAddSubspaceManagerInstruction(
  accounts: AddSubspaceManagerInstructionAccounts,
  args: AddSubspaceManagerInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
) {
  const [data] = addSubspaceManagerStruct.serialize({
    instructionDiscriminator: addSubspaceManagerInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.subspace,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.profile,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.connectionProof,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.manager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
