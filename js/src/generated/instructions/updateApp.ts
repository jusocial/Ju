/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { AppData, appDataBeet } from '../types/AppData';

/**
 * @category Instructions
 * @category UpdateApp
 * @category generated
 */
export type UpdateAppInstructionArgs = {
  data: AppData;
};
/**
 * @category Instructions
 * @category UpdateApp
 * @category generated
 */
export const updateAppStruct = new beet.FixableBeetArgsStruct<
  UpdateAppInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', appDataBeet],
  ],
  'UpdateAppInstructionArgs',
);
/**
 * Accounts required by the _updateApp_ instruction
 *
 * @property [_writable_] app
 * @property [] registeringProcessorPda (optional)
 * @property [] connectingProcessorPda (optional)
 * @property [] publishingProcessorPda (optional)
 * @property [] collectingProcessorPda (optional)
 * @property [] referencingProcessorPda (optional)
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category UpdateApp
 * @category generated
 */
export type UpdateAppInstructionAccounts = {
  app: web3.PublicKey;
  registeringProcessorPda?: web3.PublicKey;
  connectingProcessorPda?: web3.PublicKey;
  publishingProcessorPda?: web3.PublicKey;
  collectingProcessorPda?: web3.PublicKey;
  referencingProcessorPda?: web3.PublicKey;
  authority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const updateAppInstructionDiscriminator = [126, 189, 95, 214, 18, 25, 42, 176];

/**
 * Creates a _UpdateApp_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateApp
 * @category generated
 */
export function createUpdateAppInstruction(
  accounts: UpdateAppInstructionAccounts,
  args: UpdateAppInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'),
) {
  const [data] = updateAppStruct.serialize({
    instructionDiscriminator: updateAppInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: true,
      isSigner: false,
    },
  ];

  if (accounts.registeringProcessorPda != null) {
    keys.push({
      pubkey: accounts.registeringProcessorPda,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.connectingProcessorPda != null) {
    if (accounts.registeringProcessorPda == null) {
      throw new Error(
        "When providing 'connectingProcessorPda' then 'accounts.registeringProcessorPda' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.connectingProcessorPda,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.publishingProcessorPda != null) {
    if (accounts.registeringProcessorPda == null || accounts.connectingProcessorPda == null) {
      throw new Error(
        "When providing 'publishingProcessorPda' then 'accounts.registeringProcessorPda', 'accounts.connectingProcessorPda' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.publishingProcessorPda,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.collectingProcessorPda != null) {
    if (
      accounts.registeringProcessorPda == null ||
      accounts.connectingProcessorPda == null ||
      accounts.publishingProcessorPda == null
    ) {
      throw new Error(
        "When providing 'collectingProcessorPda' then 'accounts.registeringProcessorPda', 'accounts.connectingProcessorPda', 'accounts.publishingProcessorPda' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.collectingProcessorPda,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.referencingProcessorPda != null) {
    if (
      accounts.registeringProcessorPda == null ||
      accounts.connectingProcessorPda == null ||
      accounts.publishingProcessorPda == null ||
      accounts.collectingProcessorPda == null
    ) {
      throw new Error(
        "When providing 'referencingProcessorPda' then 'accounts.registeringProcessorPda', 'accounts.connectingProcessorPda', 'accounts.publishingProcessorPda', 'accounts.collectingProcessorPda' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.referencingProcessorPda,
      isWritable: false,
      isSigner: false,
    });
  }
  keys.push({
    pubkey: accounts.authority,
    isWritable: true,
    isSigner: true,
  });
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  });

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
