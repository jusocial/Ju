/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Subspace}
 * @category Accounts
 * @category generated
 */
export type SubspaceArgs = {
  uuid: string
  app: web3.PublicKey
  authority: web3.PublicKey
  creator: web3.PublicKey
  alias: beet.COption<string>
  metadataUri: string
  publishingProcessor: beet.COption<web3.PublicKey>
  connectingProcessor: beet.COption<web3.PublicKey>
  collectingProcessor: beet.COption<web3.PublicKey>
  referencingProcessor: beet.COption<web3.PublicKey>
}

export const subspaceDiscriminator = [105, 6, 104, 112, 174, 108, 161, 167]
/**
 * Holds the data for the {@link Subspace} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Subspace implements SubspaceArgs {
  private constructor(
    readonly uuid: string,
    readonly app: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly creator: web3.PublicKey,
    readonly alias: beet.COption<string>,
    readonly metadataUri: string,
    readonly publishingProcessor: beet.COption<web3.PublicKey>,
    readonly connectingProcessor: beet.COption<web3.PublicKey>,
    readonly collectingProcessor: beet.COption<web3.PublicKey>,
    readonly referencingProcessor: beet.COption<web3.PublicKey>
  ) {}

  /**
   * Creates a {@link Subspace} instance from the provided args.
   */
  static fromArgs(args: SubspaceArgs) {
    return new Subspace(
      args.uuid,
      args.app,
      args.authority,
      args.creator,
      args.alias,
      args.metadataUri,
      args.publishingProcessor,
      args.connectingProcessor,
      args.collectingProcessor,
      args.referencingProcessor
    )
  }

  /**
   * Deserializes the {@link Subspace} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Subspace, number] {
    return Subspace.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Subspace} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Subspace> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Subspace account at ${address}`)
    }
    return Subspace.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, subspaceBeet)
  }

  /**
   * Deserializes the {@link Subspace} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Subspace, number] {
    return subspaceBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Subspace} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return subspaceBeet.serialize({
      accountDiscriminator: subspaceDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Subspace} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: SubspaceArgs) {
    const instance = Subspace.fromArgs(args)
    return subspaceBeet.toFixedFromValue({
      accountDiscriminator: subspaceDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Subspace} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: SubspaceArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Subspace.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Subspace} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      uuid: this.uuid,
      app: this.app.toBase58(),
      authority: this.authority.toBase58(),
      creator: this.creator.toBase58(),
      alias: this.alias,
      metadataUri: this.metadataUri,
      publishingProcessor: this.publishingProcessor,
      connectingProcessor: this.connectingProcessor,
      collectingProcessor: this.collectingProcessor,
      referencingProcessor: this.referencingProcessor,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const subspaceBeet = new beet.FixableBeetStruct<
  Subspace,
  SubspaceArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['uuid', beet.utf8String],
    ['app', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['alias', beet.coption(beet.utf8String)],
    ['metadataUri', beet.utf8String],
    ['publishingProcessor', beet.coption(beetSolana.publicKey)],
    ['connectingProcessor', beet.coption(beetSolana.publicKey)],
    ['collectingProcessor', beet.coption(beetSolana.publicKey)],
    ['referencingProcessor', beet.coption(beetSolana.publicKey)],
  ],
  Subspace.fromArgs,
  'Subspace'
)
