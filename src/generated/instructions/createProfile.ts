/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { ProfileData, profileDataBeet } from '../types/ProfileData'

/**
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export type CreateProfileInstructionArgs = {
  data: ProfileData
  externalProcessingData: beet.COption<string>
}
/**
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export const createProfileStruct = new beet.FixableBeetArgsStruct<
  CreateProfileInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', profileDataBeet],
    ['externalProcessingData', beet.coption(beet.utf8String)],
  ],
  'CreateProfileInstructionArgs'
)
/**
 * Accounts required by the _createProfile_ instruction
 *
 * @property [] app
 * @property [_writable_] profile
 * @property [_writable_] aliasPda (optional)
 * @property [] connectingProcessorPda (optional)
 * @property [] registeringProcessor (optional)
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export type CreateProfileInstructionAccounts = {
  app: web3.PublicKey
  profile: web3.PublicKey
  aliasPda?: web3.PublicKey
  connectingProcessorPda?: web3.PublicKey
  registeringProcessor?: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createProfileInstructionDiscriminator = [
  225, 205, 234, 143, 17, 186, 50, 220,
]

/**
 * Creates a _CreateProfile_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export function createCreateProfileInstruction(
  accounts: CreateProfileInstructionAccounts,
  args: CreateProfileInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq')
) {
  const [data] = createProfileStruct.serialize({
    instructionDiscriminator: createProfileInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.profile,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.aliasPda != null) {
    keys.push({
      pubkey: accounts.aliasPda,
      isWritable: true,
      isSigner: false,
    })
  }
  if (accounts.connectingProcessorPda != null) {
    if (accounts.aliasPda == null) {
      throw new Error(
        "When providing 'connectingProcessorPda' then 'accounts.aliasPda' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.connectingProcessorPda,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.registeringProcessor != null) {
    if (accounts.aliasPda == null || accounts.connectingProcessorPda == null) {
      throw new Error(
        "When providing 'registeringProcessor' then 'accounts.aliasPda', 'accounts.connectingProcessorPda' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.registeringProcessor,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.authority,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
