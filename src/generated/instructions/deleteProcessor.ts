/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category DeleteProcessor
 * @category generated
 */
export type DeleteProcessorInstructionArgs = {
  programAddress: web3.PublicKey
}
/**
 * @category Instructions
 * @category DeleteProcessor
 * @category generated
 */
export const deleteProcessorStruct = new beet.BeetArgsStruct<
  DeleteProcessorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['programAddress', beetSolana.publicKey],
  ],
  'DeleteProcessorInstructionArgs'
)
/**
 * Accounts required by the _deleteProcessor_ instruction
 *
 * @property [_writable_] processor
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category DeleteProcessor
 * @category generated
 */
export type DeleteProcessorInstructionAccounts = {
  processor: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const deleteProcessorInstructionDiscriminator = [
  135, 179, 43, 65, 41, 243, 44, 110,
]

/**
 * Creates a _DeleteProcessor_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DeleteProcessor
 * @category generated
 */
export function createDeleteProcessorInstruction(
  accounts: DeleteProcessorInstructionAccounts,
  args: DeleteProcessorInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq')
) {
  const [data] = deleteProcessorStruct.serialize({
    instructionDiscriminator: deleteProcessorInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.processor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
