/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { PublicationData, publicationDataBeet } from '../types/PublicationData'

/**
 * @category Instructions
 * @category CreatePublication
 * @category generated
 */
export type CreatePublicationInstructionArgs = {
  data: PublicationData
  externalProcessingData: beet.COption<string>
}
/**
 * @category Instructions
 * @category CreatePublication
 * @category generated
 */
export const createPublicationStruct = new beet.FixableBeetArgsStruct<
  CreatePublicationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', publicationDataBeet],
    ['externalProcessingData', beet.coption(beet.utf8String)],
  ],
  'CreatePublicationInstructionArgs'
)
/**
 * Accounts required by the _createPublication_ instruction
 *
 * @property [] app
 * @property [] profile
 * @property [_writable_] publication
 * @property [] subspace (optional)
 * @property [] targetPublication (optional)
 * @property [] collectingProcessorPda (optional)
 * @property [] referencingProcessorPda (optional)
 * @property [] publishingProcessor (optional)
 * @property [] referencingProcessor (optional)
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CreatePublication
 * @category generated
 */
export type CreatePublicationInstructionAccounts = {
  app: web3.PublicKey
  profile: web3.PublicKey
  publication: web3.PublicKey
  subspace?: web3.PublicKey
  targetPublication?: web3.PublicKey
  collectingProcessorPda?: web3.PublicKey
  referencingProcessorPda?: web3.PublicKey
  publishingProcessor?: web3.PublicKey
  referencingProcessor?: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createPublicationInstructionDiscriminator = [
  8, 172, 15, 160, 253, 31, 51, 212,
]

/**
 * Creates a _CreatePublication_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreatePublication
 * @category generated
 */
export function createCreatePublicationInstruction(
  accounts: CreatePublicationInstructionAccounts,
  args: CreatePublicationInstructionArgs,
  programId = new web3.PublicKey('964vWgVEK9X8ZwZB2HyshFVmHUWbcYpRTnVYz2o3F2Xq')
) {
  const [data] = createPublicationStruct.serialize({
    instructionDiscriminator: createPublicationInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.profile,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.publication,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.subspace != null) {
    keys.push({
      pubkey: accounts.subspace,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.targetPublication != null) {
    if (accounts.subspace == null) {
      throw new Error(
        "When providing 'targetPublication' then 'accounts.subspace' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.targetPublication,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.collectingProcessorPda != null) {
    if (accounts.subspace == null || accounts.targetPublication == null) {
      throw new Error(
        "When providing 'collectingProcessorPda' then 'accounts.subspace', 'accounts.targetPublication' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.collectingProcessorPda,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.referencingProcessorPda != null) {
    if (
      accounts.subspace == null ||
      accounts.targetPublication == null ||
      accounts.collectingProcessorPda == null
    ) {
      throw new Error(
        "When providing 'referencingProcessorPda' then 'accounts.subspace', 'accounts.targetPublication', 'accounts.collectingProcessorPda' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.referencingProcessorPda,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.publishingProcessor != null) {
    if (
      accounts.subspace == null ||
      accounts.targetPublication == null ||
      accounts.collectingProcessorPda == null ||
      accounts.referencingProcessorPda == null
    ) {
      throw new Error(
        "When providing 'publishingProcessor' then 'accounts.subspace', 'accounts.targetPublication', 'accounts.collectingProcessorPda', 'accounts.referencingProcessorPda' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.publishingProcessor,
      isWritable: false,
      isSigner: false,
    })
  }
  if (accounts.referencingProcessor != null) {
    if (
      accounts.subspace == null ||
      accounts.targetPublication == null ||
      accounts.collectingProcessorPda == null ||
      accounts.referencingProcessorPda == null ||
      accounts.publishingProcessor == null
    ) {
      throw new Error(
        "When providing 'referencingProcessor' then 'accounts.subspace', 'accounts.targetPublication', 'accounts.collectingProcessorPda', 'accounts.referencingProcessorPda', 'accounts.publishingProcessor' need(s) to be provided as well."
      )
    }
    keys.push({
      pubkey: accounts.referencingProcessor,
      isWritable: false,
      isSigner: false,
    })
  }
  keys.push({
    pubkey: accounts.authority,
    isWritable: true,
    isSigner: true,
  })
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  })

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
