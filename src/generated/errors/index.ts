/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * ProcessorManagementNotAthorized: 'Procesor management action not authorized'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorManagementNotAthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'ProcessorManagementNotAthorized'
  constructor() {
    super('Procesor management action not authorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorManagementNotAthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1770,
  () => new ProcessorManagementNotAthorizedError()
)
createErrorFromNameLookup.set(
  'ProcessorManagementNotAthorized',
  () => new ProcessorManagementNotAthorizedError()
)

/**
 * ProcessorTypeMismatch: 'Procesor type mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorTypeMismatchError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ProcessorTypeMismatch'
  constructor() {
    super('Procesor type mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorTypeMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new ProcessorTypeMismatchError())
createErrorFromNameLookup.set(
  'ProcessorTypeMismatch',
  () => new ProcessorTypeMismatchError()
)

/**
 * ProcessorNameLengthIncorrect: 'Procesor name length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNameLengthIncorrectError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'ProcessorNameLengthIncorrect'
  constructor() {
    super('Procesor name length is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNameLengthIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new ProcessorNameLengthIncorrectError()
)
createErrorFromNameLookup.set(
  'ProcessorNameLengthIncorrect',
  () => new ProcessorNameLengthIncorrectError()
)

/**
 * ProcessorNameMustBeAlphanumeric: 'Processor name must contain only ASCII letters and numbers'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNameMustBeAlphanumericError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'ProcessorNameMustBeAlphanumeric'
  constructor() {
    super('Processor name must contain only ASCII letters and numbers')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNameMustBeAlphanumericError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new ProcessorNameMustBeAlphanumericError()
)
createErrorFromNameLookup.set(
  'ProcessorNameMustBeAlphanumeric',
  () => new ProcessorNameMustBeAlphanumericError()
)

/**
 * ProcessorNotWhitelisted: 'Procesor trying to use is not whitelisted'
 *
 * @category Errors
 * @category generated
 */
export class ProcessorNotWhitelistedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'ProcessorNotWhitelisted'
  constructor() {
    super('Procesor trying to use is not whitelisted')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProcessorNotWhitelistedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new ProcessorNotWhitelistedError())
createErrorFromNameLookup.set(
  'ProcessorNotWhitelisted',
  () => new ProcessorNotWhitelistedError()
)

/**
 * AppNameLengthIncorrect: 'Application name (ID) length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class AppNameLengthIncorrectError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'AppNameLengthIncorrect'
  constructor() {
    super('Application name (ID) length is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppNameLengthIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new AppNameLengthIncorrectError())
createErrorFromNameLookup.set(
  'AppNameLengthIncorrect',
  () => new AppNameLengthIncorrectError()
)

/**
 * AppNameMustBeAlphanumeric: 'Application name (ID) must contain only ASCII letters and numbers'
 *
 * @category Errors
 * @category generated
 */
export class AppNameMustBeAlphanumericError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'AppNameMustBeAlphanumeric'
  constructor() {
    super('Application name (ID) must contain only ASCII letters and numbers')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppNameMustBeAlphanumericError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1776,
  () => new AppNameMustBeAlphanumericError()
)
createErrorFromNameLookup.set(
  'AppNameMustBeAlphanumeric',
  () => new AppNameMustBeAlphanumericError()
)

/**
 * AppManagementNotAthorized: 'App management action not authorized'
 *
 * @category Errors
 * @category generated
 */
export class AppManagementNotAthorizedError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'AppManagementNotAthorized'
  constructor() {
    super('App management action not authorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AppManagementNotAthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new AppManagementNotAthorizedError()
)
createErrorFromNameLookup.set(
  'AppManagementNotAthorized',
  () => new AppManagementNotAthorizedError()
)

/**
 * AliasLengthIncorrect: 'Alias length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class AliasLengthIncorrectError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'AliasLengthIncorrect'
  constructor() {
    super('Alias length is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasLengthIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new AliasLengthIncorrectError())
createErrorFromNameLookup.set(
  'AliasLengthIncorrect',
  () => new AliasLengthIncorrectError()
)

/**
 * AliasMustBeAlphanumeric: 'Alias must contain only ASCII letters and numbers'
 *
 * @category Errors
 * @category generated
 */
export class AliasMustBeAlphanumericError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'AliasMustBeAlphanumeric'
  constructor() {
    super('Alias must contain only ASCII letters and numbers')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasMustBeAlphanumericError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new AliasMustBeAlphanumericError())
createErrorFromNameLookup.set(
  'AliasMustBeAlphanumeric',
  () => new AliasMustBeAlphanumericError()
)

/**
 * ProfileIncorrect: 'Profile incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileIncorrectError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'ProfileIncorrect'
  constructor() {
    super('Profile incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new ProfileIncorrectError())
createErrorFromNameLookup.set(
  'ProfileIncorrect',
  () => new ProfileIncorrectError()
)

/**
 * ProfileAliasIncorrect: 'Profile handle is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class ProfileAliasIncorrectError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'ProfileAliasIncorrect'
  constructor() {
    super('Profile handle is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProfileAliasIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new ProfileAliasIncorrectError())
createErrorFromNameLookup.set(
  'ProfileAliasIncorrect',
  () => new ProfileAliasIncorrectError()
)

/**
 * AliasAccountRequired: 'Alias account required to register action'
 *
 * @category Errors
 * @category generated
 */
export class AliasAccountRequiredError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'AliasAccountRequired'
  constructor() {
    super('Alias account required to register action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasAccountRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new AliasAccountRequiredError())
createErrorFromNameLookup.set(
  'AliasAccountRequired',
  () => new AliasAccountRequiredError()
)

/**
 * BothAliasAccountRequired: 'Both handle account required to update'
 *
 * @category Errors
 * @category generated
 */
export class BothAliasAccountRequiredError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'BothAliasAccountRequired'
  constructor() {
    super('Both handle account required to update')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BothAliasAccountRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new BothAliasAccountRequiredError())
createErrorFromNameLookup.set(
  'BothAliasAccountRequired',
  () => new BothAliasAccountRequiredError()
)

/**
 * CurrentAliasAccountRequired: 'Current handle account required to delete'
 *
 * @category Errors
 * @category generated
 */
export class CurrentAliasAccountRequiredError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'CurrentAliasAccountRequired'
  constructor() {
    super('Current handle account required to delete')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CurrentAliasAccountRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new CurrentAliasAccountRequiredError()
)
createErrorFromNameLookup.set(
  'CurrentAliasAccountRequired',
  () => new CurrentAliasAccountRequiredError()
)

/**
 * UpdateNotAuthorized: 'Profile update not authorized'
 *
 * @category Errors
 * @category generated
 */
export class UpdateNotAuthorizedError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'UpdateNotAuthorized'
  constructor() {
    super('Profile update not authorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UpdateNotAuthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new UpdateNotAuthorizedError())
createErrorFromNameLookup.set(
  'UpdateNotAuthorized',
  () => new UpdateNotAuthorizedError()
)

/**
 * SubspaceAliasIncorrect: 'Subspace handle is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class SubspaceAliasIncorrectError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'SubspaceAliasIncorrect'
  constructor() {
    super('Subspace handle is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SubspaceAliasIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new SubspaceAliasIncorrectError())
createErrorFromNameLookup.set(
  'SubspaceAliasIncorrect',
  () => new SubspaceAliasIncorrectError()
)

/**
 * UriLengthIncorrect: 'URI length is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class UriLengthIncorrectError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'UriLengthIncorrect'
  constructor() {
    super('URI length is incorrect')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UriLengthIncorrectError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new UriLengthIncorrectError())
createErrorFromNameLookup.set(
  'UriLengthIncorrect',
  () => new UriLengthIncorrectError()
)

/**
 * TargetPublicationRequired: 'Missed Target Publication account'
 *
 * @category Errors
 * @category generated
 */
export class TargetPublicationRequiredError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'TargetPublicationRequired'
  constructor() {
    super('Missed Target Publication account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TargetPublicationRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1782,
  () => new TargetPublicationRequiredError()
)
createErrorFromNameLookup.set(
  'TargetPublicationRequired',
  () => new TargetPublicationRequiredError()
)

/**
 * BothMirrorAndReplyNotAllowed: 'Both mirroring and replying not allowed in the same time'
 *
 * @category Errors
 * @category generated
 */
export class BothMirrorAndReplyNotAllowedError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'BothMirrorAndReplyNotAllowed'
  constructor() {
    super('Both mirroring and replying not allowed in the same time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BothMirrorAndReplyNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1783,
  () => new BothMirrorAndReplyNotAllowedError()
)
createErrorFromNameLookup.set(
  'BothMirrorAndReplyNotAllowed',
  () => new BothMirrorAndReplyNotAllowedError()
)

/**
 * SelfConnectionNotAllowed: 'Self conections is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class SelfConnectionNotAllowedError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'SelfConnectionNotAllowed'
  constructor() {
    super('Self conections is not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SelfConnectionNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new SelfConnectionNotAllowedError())
createErrorFromNameLookup.set(
  'SelfConnectionNotAllowed',
  () => new SelfConnectionNotAllowedError()
)

/**
 * ConnectionTargetAccountMissed: 'Connection target account is missed'
 *
 * @category Errors
 * @category generated
 */
export class ConnectionTargetAccountMissedError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'ConnectionTargetAccountMissed'
  constructor() {
    super('Connection target account is missed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectionTargetAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1785,
  () => new ConnectionTargetAccountMissedError()
)
createErrorFromNameLookup.set(
  'ConnectionTargetAccountMissed',
  () => new ConnectionTargetAccountMissedError()
)

/**
 * ValidationFail: 'Connection validation failed'
 *
 * @category Errors
 * @category generated
 */
export class ValidationFailError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'ValidationFail'
  constructor() {
    super('Connection validation failed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ValidationFailError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new ValidationFailError())
createErrorFromNameLookup.set('ValidationFail', () => new ValidationFailError())

/**
 * AliasAccountExist: 'Alias account already exist'
 *
 * @category Errors
 * @category generated
 */
export class AliasAccountExistError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'AliasAccountExist'
  constructor() {
    super('Alias account already exist')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AliasAccountExistError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new AliasAccountExistError())
createErrorFromNameLookup.set(
  'AliasAccountExist',
  () => new AliasAccountExistError()
)

/**
 * SelfPublicationCollecting: 'Forbidden to collect user's  own publication'
 *
 * @category Errors
 * @category generated
 */
export class SelfPublicationCollectingError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'SelfPublicationCollecting'
  constructor() {
    super("Forbidden to collect user's  own publication")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SelfPublicationCollectingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1788,
  () => new SelfPublicationCollectingError()
)
createErrorFromNameLookup.set(
  'SelfPublicationCollecting',
  () => new SelfPublicationCollectingError()
)

/**
 * RegisteringProcessorAccountMissed: 'Missed registering external processor account'
 *
 * @category Errors
 * @category generated
 */
export class RegisteringProcessorAccountMissedError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'RegisteringProcessorAccountMissed'
  constructor() {
    super('Missed registering external processor account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RegisteringProcessorAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1789,
  () => new RegisteringProcessorAccountMissedError()
)
createErrorFromNameLookup.set(
  'RegisteringProcessorAccountMissed',
  () => new RegisteringProcessorAccountMissedError()
)

/**
 * ConnectingProcessorAccountMissed: 'Missed connecting external processor account'
 *
 * @category Errors
 * @category generated
 */
export class ConnectingProcessorAccountMissedError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'ConnectingProcessorAccountMissed'
  constructor() {
    super('Missed connecting external processor account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectingProcessorAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new ConnectingProcessorAccountMissedError()
)
createErrorFromNameLookup.set(
  'ConnectingProcessorAccountMissed',
  () => new ConnectingProcessorAccountMissedError()
)

/**
 * PublishingProcessorAccountMissed: 'Missed publishing external processor account'
 *
 * @category Errors
 * @category generated
 */
export class PublishingProcessorAccountMissedError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'PublishingProcessorAccountMissed'
  constructor() {
    super('Missed publishing external processor account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublishingProcessorAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178b,
  () => new PublishingProcessorAccountMissedError()
)
createErrorFromNameLookup.set(
  'PublishingProcessorAccountMissed',
  () => new PublishingProcessorAccountMissedError()
)

/**
 * CollectingProcessorAccountMissed: 'Missed collecting external processor account'
 *
 * @category Errors
 * @category generated
 */
export class CollectingProcessorAccountMissedError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'CollectingProcessorAccountMissed'
  constructor() {
    super('Missed collecting external processor account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectingProcessorAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178c,
  () => new CollectingProcessorAccountMissedError()
)
createErrorFromNameLookup.set(
  'CollectingProcessorAccountMissed',
  () => new CollectingProcessorAccountMissedError()
)

/**
 * ReferencingProcessorAccountMissed: 'Missed referencing external processor account'
 *
 * @category Errors
 * @category generated
 */
export class ReferencingProcessorAccountMissedError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'ReferencingProcessorAccountMissed'
  constructor() {
    super('Missed referencing external processor account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferencingProcessorAccountMissedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178d,
  () => new ReferencingProcessorAccountMissedError()
)
createErrorFromNameLookup.set(
  'ReferencingProcessorAccountMissed',
  () => new ReferencingProcessorAccountMissedError()
)

/**
 * RegisteringProcessorMismatch: 'Registering external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class RegisteringProcessorMismatchError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'RegisteringProcessorMismatch'
  constructor() {
    super('Registering external processor mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RegisteringProcessorMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178e,
  () => new RegisteringProcessorMismatchError()
)
createErrorFromNameLookup.set(
  'RegisteringProcessorMismatch',
  () => new RegisteringProcessorMismatchError()
)

/**
 * ConnectingProcessorMismatch: 'Connecting external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ConnectingProcessorMismatchError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'ConnectingProcessorMismatch'
  constructor() {
    super('Connecting external processor mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConnectingProcessorMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178f,
  () => new ConnectingProcessorMismatchError()
)
createErrorFromNameLookup.set(
  'ConnectingProcessorMismatch',
  () => new ConnectingProcessorMismatchError()
)

/**
 * PublishingProcessorMismatch: 'Publishing external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class PublishingProcessorMismatchError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'PublishingProcessorMismatch'
  constructor() {
    super('Publishing external processor mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublishingProcessorMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1790,
  () => new PublishingProcessorMismatchError()
)
createErrorFromNameLookup.set(
  'PublishingProcessorMismatch',
  () => new PublishingProcessorMismatchError()
)

/**
 * CollectingProcessorMismatch: 'Collecting external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class CollectingProcessorMismatchError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'CollectingProcessorMismatch'
  constructor() {
    super('Collecting external processor mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectingProcessorMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1791,
  () => new CollectingProcessorMismatchError()
)
createErrorFromNameLookup.set(
  'CollectingProcessorMismatch',
  () => new CollectingProcessorMismatchError()
)

/**
 * ReferencingProcessorMismatch: 'Referencing external processor mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ReferencingProcessorMismatchError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'ReferencingProcessorMismatch'
  constructor() {
    super('Referencing external processor mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferencingProcessorMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1792,
  () => new ReferencingProcessorMismatchError()
)
createErrorFromNameLookup.set(
  'ReferencingProcessorMismatch',
  () => new ReferencingProcessorMismatchError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
